events {
    worker_connections 1024;
}

http {
    server {
        listen 80;
        server_name 127.0.0.1;
        return 301 $scheme://localhost$request_uri;
    }

    server {
        listen 80;
        server_name localhost;

        # Path for static files
        root /app/public;
        gzip_static on;
        client_max_body_size 1024M;

        gzip            on;
        gzip_types      text/plain application/xml text/css application/javascript;
        gzip_min_length 1000;

        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";

        charset utf-8;

        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;

            # If the file exists as a static file serve it directly without
            # running all the other rewrite tests on it
            if (-f $request_filename) {
            break;
            }

            # check for index.html for directory index
            # if it's there on the filesystem then rewrite
            # the url to add /index.html to the end of it
            # and then break to send it to the next config rules.
            if (-f $request_filename/index.html) {
                rewrite (.*) $1/index.html break;
            }

            # this is the meat of the rack page caching config
            # it adds .html to the end of the url and then checks
            # the filesystem for that file. If it exists, then we
            # rewrite the url to have explicit .html on the end
            # and then send it on its way to the next config rule.
            # if there is no file on the fs then it sets all the
            # necessary headers and proxies to our upstream pumas
            if (-f $request_filename.html) {
                rewrite (.*) $1.html break;
            }

            if (!-f $request_filename) {
                proxy_pass http://backend_rails:3000;
                break;
            }
        }

        # Now this supposedly should work as it gets the filenames with querystrings that Rails provides.
        # BUT there's a chance it could break the ajax calls.
        location ~* \.(ico|css|js|gif|jpg|jpeg|png)(\?[0-9]+)?$ {
            expires max;
            log_not_found off;
            break;
        }
        location = /favicon.ico { access_log off; log_not_found off; }
        location = /robots.txt  { access_log off; log_not_found off; }

        location ~ /\.ht {
            deny all;
        }

        location ~ /\.(?!well-known).* {
            deny all;
        }
    }
}
